plugins {
    id "de.undercouch.download" version "4.0.4"
}

apply plugin: 'de.undercouch.download'

dependencies {
    implementation project(':core')
    implementation project(':core').sourceSets.main.runtimeClasspath
    implementation 'org.apache.commons:commons-lang3:3.1'
}

task generateMessages(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'pt.lsts.imc.generator.ClassGenerator'
    workingDir = "$parent.rootDir"
    // arguments to pass to the application
    args = ["${-> project.ext.imcXmlPath}"]
    
    doFirst {
        if (project.ext.has("imcXmlSha"))
            args = ["${-> project.ext.imcXmlPath}", "${-> project.ext.imcXmlSha}", "${-> project.ext.imcXmlBranch}", "${-> project.ext.imcXmlCommitNote}"]
    }

    doLast {
        println "args for the generator >> [ "
        args.each { println " '$it', " }
        println " ]"
        deleteImcAddr
    }
}

task downloadImc(type: Download) {
    src "https://github.com/${gradle.ext.imcGitHubRepo}/raw/${gradle.ext.imcGitHubBranch}/IMC.xml"
    dest "${parent.rootDir}/src-generated/resources/xml/IMC.xml"

    doLast {
        println("IMC.xml downloaded to '$dest'.")
        def sourceGitHub = "https://api.github.com/repos/${gradle.ext.imcGitHubRepo}/commits/${gradle.ext.imcGitHubBranch}";
        def commitInfo = new groovy.json.JsonSlurper().parse(sourceGitHub.toURL());
        def sha = commitInfo.sha
        File shaFile = new File("${parent.rootDir}/src-generated/resources/xml/IMC.sha")
        shaFile.text = "$commitInfo.sha" +
                "\n" + "$gradle.ext.imcGitHubBranch" +
                "\n" + "url: $sourceGitHub";
        println("IMC SHA: ${commitInfo.sha}")
        project.ext.imcXmlSha = "$commitInfo.sha"
        def branchName = getBranchFromCommit()
        project.ext.imcXmlBranch = branchName == null ? "$gradle.ext.imcGitHubBranch" : branchName
        project.ext.imcXmlCommitNote = "${commitInfo.commit.author.name} (${commitInfo.commit.author.email}), " +
                "${commitInfo.commit.author.date}, " +
                "${commitInfo.html_url}, " +
                "${commitInfo.commit.message}"
        project.ext.imcXmlPath = "${parent.rootDir}/src-generated/resources/xml"
    }
}

def getBranchFromCommit() {
    try {
        // To proper get branch from GitHub we need to process html from https://github.com/LSTS/imc/branch_commits/7daa70d4b5cfc8f1851a60b6d0c38354943b7c82
        def url = "https://github.com/${gradle.ext.imcGitHubRepo}/branch_commits/${gradle.ext.imcGitHubBranch}".toURL()
        def branchName = null
        url.eachLine({
            // println it
            def preStr = "<li class=\"branch\"><a href=\"/${gradle.ext.imcGitHubRepo}\">"
            if (it.contains(preStr)) {
                def firstBranch = it.trim().replace(preStr, '').replace("</a></li>", '').trim()
                if (branchName == null) {
                    branchName = firstBranch
                    // println branchName
                }
            }
        })
        return branchName
    } catch (Exception e) {
        return null
    }
}

task downloadImcAddr(type: Download) {
    src "https://github.com/${gradle.ext.imcGitHubRepo}/raw/${gradle.ext.imcGitHubBranch}/IMC_Addresses.xml"
    dest "${parent.rootDir}/src-generated/resources/xml/IMC_Addresses.xml"
    doLast {
        println("IMC_Addresses.xml downloaded to '$dest'.")
    }
}

task deleteImcAddr(type: Delete) {
    delete "${parent.rootDir}/src-generated/resources/xml/IMC_Addresses.xml"
}

task prepImcFolderEnv {
    def folder = new File("$gradle.ext.imcFilePath")
    if (!folder.isAbsolute())
        folder = new File("${parent.rootDir}", "$gradle.ext.imcFilePath")
    project.ext.imcXmlPath = folder.getAbsolutePath()

    println "IMC Folder is '${project.ext.imcXmlPath}'"
}

task checkIMCFolderGit {
    doFirst {
        def folder = new File("${project.ext.imcXmlPath}/.git")
        if (!folder.exists()) {
            project.ext.imcXmlSha = "unknown sha"
            project.ext.imcXmlBranch = "unknown branch"
            project.ext.imcXmlCommitNote = "unknown commit notes"

            File shaFile = new File("${parent.rootDir}/src-generated/resources/xml/IMC.sha")
            shaFile.text = "$project.ext.imcXmlSha" +
                    "\n" + "$project.ext.imcXmlBranch" +
                    "\n" + "From local folder not on Git";

            getGitPropsFromFolder.enabled = false
        }
    }
}
task getGitPropsFromFolder(type: com.gorylenko.GenerateGitPropertiesTask) {
    dependsOn checkIMCFolderGit

    gitProperties.dotGitDirectory = "${project.ext.imcXmlPath}/.git"
    gitProperties.extProperty = 'imcGitProps'
    gitProperties.failOnNoGitDirectory = false

    gitProperties.dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    gitProperties.dateFormatTimeZone = "UTC"

    gitProperties.gitPropertiesName = "imc-git.info"
    gitProperties.keys = ['git.branch',
            // 'git.build.version',
            'git.closest.tag.commit.count',
            'git.closest.tag.name',
            'git.commit.id',
            'git.commit.id.abbrev',
            'git.commit.id.describe',
            'git.commit.time',
            'git.dirty',
            // 'git.remote.origin.url',
            'git.tags',
            'git.commit.user.name',
            'git.commit.message.short',
    ]

    outputs.upToDateWhen { false }

    doLast {
        project.ext.imcXmlSha = "${project.ext.imcGitProps['git.commit.id.abbrev']}"
        project.ext.imcXmlBranch = "${project.ext.imcGitProps['git.branch']}"
        if ("${project.ext.imcGitProps['git.dirty']}" != 'false') {
            project.ext.imcXmlBranch += "-dirty"
        }
        project.ext.imcXmlCommitNote = "${project.ext.imcGitProps['git.commit.user.name']}, " +
                "${project.ext.imcGitProps['git.commit.time']}, " +
                "${project.ext.imcGitProps['git.commit.message.short']}"

        File shaFile = new File("${parent.rootDir}/src-generated/resources/xml/IMC.sha")
        shaFile.text = "${project.ext.imcGitProps['git.commit.id.describe']}" +
                "\n" + "${project.ext.imcXmlBranch}" +
                "\n" + "From local folder";
    }
}

task updateImc {
    description = "Get IMC from GitHub and generate classes"
    group = 'Generator'
    dependsOn = [deleteImcAddr]
    dependsOn += downloadImc
    if (gradle.ext.imcDownloadIMCAddresses == 'true')
        dependsOn += downloadImcAddr
    else
        dependsOn += deleteImcAddr
    dependsOn += generateMessages
}

task updateImcFromFolder {
    description = "Get IMC from folder and generate classes"
    group = 'Generator'
    dependsOn = [deleteImcAddr, prepImcFolderEnv, getGitPropsFromFolder, generateMessages]
}