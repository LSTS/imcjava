<project name="IMCJava" default="dist">

  <property name="compile-source" value="1.7" />
  <property name="compile-target" value="1.7" />
  <property name="compile-encoding" value="UTF-8" />
	
  <property name="test-dir" location="src-junit" />
	
  <path id="classpath.dependencies">
    <pathelement location="lib/minimal-json-0.9.2.jar" />
    <pathelement location="lib/commons-lang3-3.1.jar" />
  </path>	
	
  <path id="classpath.base">
  	<path refid="classpath.dependencies" />
  	<pathelement location="build" />  	
  </path>
  <path id="classpath.sender">
	 <pathelement location="lib/gson-2.5.jar" />
	 <pathelement location="lib/rsyntaxtextarea-2.5.8.jar" />
	 <path refid="classpath.base" />
  </path>
  <path id="classpath.test">
    <pathelement location="${test.dir}" />
    <pathelement location="lib/junit-4.10.jar" />
    <pathelement location="lib/commons-io-2.0.1.jar" />
    <path refid="classpath.base" />
  </path>
  <path id="classpath.full">
  	<pathelement location="lib/asg.cliche-110413.jar" />
  	<pathelement location="lib/commons-io-2.0.1.jar" />
  	<pathelement location="lib/commons-lang3-3.1.jar" />
  	<pathelement location="lib/firebase-client-jvm-LATEST.jar" />
  	<pathelement location="lib/javax.servlet-3.0.0.v201112011016.jar" />
  	<pathelement location="lib/jchart2d-3.2.0.jar" />
  	<pathelement location="lib/jetty-all-9.0.0.v20130308.jar" />
  	<pathelement location="lib/js.jar" />  	 
  	<path refid="classpath.base"/>
  </path>	
  <path id="classpath.imcast">
	 <pathelement location="lib/gson-2.5.jar" />
	 <path refid="classpath.base" />
  </path>

  <target name="compile-test" depends="compile-all">
    <javac encoding="${compile-encoding}" srcdir="src-junit" destdir="build" target="${compile-target}" source="${compile-source}" includes="**/*.java" fork="false">
      <classpath refid="classpath.test"/>
    </javac>
  </target>

  <target name="retrieve-samples" >
    <get src="http://lsts.github.io/imcjava/downloads/samples.zip" dest="."/>
  	<unzip src="samples.zip" dest="samples"></unzip>
  </target>
	
  <target name="test" depends="compile-test, retrieve-samples">
	<junit fork="yes" haltonerror="true" haltonfailure="true">
  	   <classpath refid="classpath.test" />
  	   <formatter type="brief" usefile="false" />
  	   <test name="pt.lsts.imc.junit.ImcStringDefsTest" />
  	   <test name="pt.lsts.imc.junit.MessageCreationTest" />
  	   <test name="pt.lsts.imc.junit.SerializationTest" />
  	   <test name="pt.lsts.imc.junit.ImcSynchTest" />
  	   <test name="pt.lsts.imc.junit.ImcFragmentsTest" />
  	   <test name="pt.lsts.imc.junit.PlanUtilitiesTest" />
	   <test name="pt.lsts.imc.junit.LsfIndexTest" />
    </junit>
  </target>

  <target name="dist" depends="generated,libimc.jar" description="Updates IMC protocol from given repository and generates libimc.jar"/>

  <target name="scminfo" depends="gitinfo"/>

  <target name="gitinfo" >
    <exec executable="git" outputproperty="git.tagstring" failonerror="false">
      <arg value="describe"/>
      <arg value="--abbrev=0"/>
    </exec>
    <exec executable="git" outputproperty="scm.revision">
      <arg value="rev-parse"/>
      <arg value="HEAD"/>
    </exec>
    <condition property="version" value="${scm.revision}" else="${git.tagstring}">
      <equals arg1="${git.tagstring}" arg2="fatal: No names found, cannot describe anything."/>
    </condition>

  </target>

  
  <target name="compile">
    <mkdir dir="build"/>
    <delete dir="build"/>
    <mkdir dir="build"/>
    <copy verbose="true" todir="build">
      <fileset dir="src" includes="**/*.xml"/>
      <fileset dir="src" includes="**/*.png"/>
    </copy>
  	<copy verbose="true" todir="build">
	  <fileset dir="src-generated" includes="xml/IMC.xml"/>
  	</copy>
  	    
    <javac encoding="${compile-encoding}" srcdir="src;src-generated"  destdir="build" target="${compile-target}" source="${compile-source}" includes="**/*.java" fork="false">
    	<classpath refid="classpath.dependencies"/>
    </javac>
   	<unjar src="lib/minimal-json-0.9.2.jar" dest="build"/>
  </target>
  
  <target name="compile-all" depends="compile-merge, compile-gui, compile-sniffer, compile-teleop, compile-preview, compile-process">
    <javac encoding="${compile-encoding}" srcdir="src-sniffer" destdir="build" target="${compile-target}" source="${compile-source}" includes="**/*.java" fork="false">
    </javac>
    <copy verbose="true" todir="build">
      <fileset dir="src-generated" includes="**/*.xml"/>
      <fileset dir="src" includes="**/*.png"/>
    </copy>
  </target>

  <target name="compile-merge" depends="compile">
	<javac encoding="${compile-encoding}" srcdir="src-merge" destdir="build" target="${compile-target}" source="${compile-source}" includes="**/*.java" fork="false">
	</javac>
  </target>
	
  <target name="compile-process" depends="compile">
	<javac encoding="${compile-encoding}" srcdir="src-process" destdir="build" target="${compile-target}" source="${compile-source}" includes="**/*.java" fork="false">
	</javac>
  </target>

  <target name="compile-gui" depends="compile">
	<javac encoding="${compile-encoding}" srcdir="src-gui" destdir="build" target="${compile-target}" source="${compile-source}" includes="**/*.java" fork="false">
	</javac>
  </target>	

  <target name="compile-shell" depends="compile">
  	<unjar src="lib/asg.cliche-110413.jar" dest="build"/>
	<javac encoding="${compile-encoding}" srcdir="src-shell" destdir="build" includes="**/*.java" fork="false">
	</javac>
  </target>

  <target name="compile-generator" depends="compile">
    <mkdir dir="build"/>
    <javac encoding="${compile-encoding}" srcdir="src-generator" destdir="build" target="${compile-target}" source="${compile-source}" includes="**/*.java" fork="false" classpath="lib/commons-lang3-3.1.jar">
    </javac>
  </target>

  <target name="compile-sniffer" depends="compile, compile-gui">
    <mkdir dir="build"/>
    <copy verbose="true" todir="build">
      <fileset dir="src-sniffer" includes="**/*.png"/>
    </copy>
    <javac encoding="${compile-encoding}" srcdir="src-sniffer" destdir="build" target="${compile-target}" source="${compile-source}" includes="**/*.java" fork="false" classpath="lib/jchart2d-3.2.0.jar">
    </javac>
  </target>

  <target name="compile-preview" depends="compile">
    <javac encoding="${compile-encoding}" srcdir="src-lsfpreview" destdir="build" target="${compile-target}" source="${compile-source}" includes="**/*.java" fork="false" classpath="lib/jchart2d-3.2.0.jar">
    </javac>
  </target>

  <target name="sniffer-jar" depends="compile-sniffer">
    <delete file="dist/sniffer.jar"/>
    <unjar src="lib/jchart2d-3.2.0.jar" dest="build"/>
    <jar destfile="dist/sniffer.jar" basedir="build" index="true">
      <manifest>
        <attribute name="Main-Class" value="pt.lsts.imc.sniffer.IMCMessageSniffer"/>
      </manifest>
    </jar>
    <echo message="The file 'dist/sniffer.jar' was generated"/>
  </target>

  <target name="teleop-jar" depends="compile-teleop">
    <delete file="dist/teleop.jar"/>
    <jar destfile="dist/teleop.jar" basedir="build" index="true">
      <manifest>
        <attribute name="Main-Class" value="pt.lsts.imc.teleop.TeleoperationApp"/>
      </manifest>
    </jar>
    <echo message="The file 'dist/teleop.jar' was generated"/>
  </target>

  <target name="compile-teleop" depends="compile, compile-gui">
    <mkdir dir="build"/>
    <javac encoding="${compile-encoding}" debug="true" srcdir="src-teleop" destdir="build" target="${compile-target}" source="${compile-source}" includes="**/*.java" fork="false">
    </javac>
  </target>

  <target name="compile-kraken" depends="compile">
    <mkdir dir="build"/>
  	<javac encoding="${compile-encoding}" debug="true" srcdir="src-scripting" destdir="build" target="${compile-target}" source="${compile-source}" includes="**/*.java" fork="false" classpath="lib/js.jar">
    </javac>
  </target>
	
  <target name="compile-sender" depends="compile">
      <copy verbose="true" todir="build">
        <fileset dir="src-sender" includes="**/*.png"/>
      </copy>
    <unjar src="lib/gson-2.5.jar" dest="build"/>
  	<unjar src="lib/rsyntaxtextarea-2.5.8.jar" dest="build"/>
	<javac encoding="${compile-encoding}" srcdir="src-sender" destdir="build" includes="**/*.java" fork="false" classpathref="classpath.sender" />	
  </target>
	
  <target name="compile-autonomy" depends="compile">
	<mkdir dir="build"/>
	<javac encoding="${compile-encoding}" srcdir="src-autonomy" destdir="build" target="${compile-target}" source="${compile-source}" includes="**/*.java" fork="false">
	</javac>
  </target>
	
  <target name="msgsender" depends="compile-sender">
  	
  	<jar destfile="dist/msgsender.jar" basedir="build" index="true">
	  <manifest>
  		<attribute name="Main-Class" value="pt.lsts.imc.sender.MessageSender"/>
  	  </manifest>
  	</jar>
  	
  	<exec executable="lib/jar2sh.sh" >
	  <arg value="dist/msgsender"/>
  	  <arg value="dist/msgsender.jar"/>
  	</exec>
  </target>
	
	<target name="imcast" depends="compile">  	      
	  <unjar src="lib/gson-2.5.jar" dest="build"/>
	  <javac encoding="${compile-encoding}" srcdir="src-imcast" destdir="build" includes="**/*.java" fork="false" classpathref="classpath.imcast" />
	  <delete file="dist/imcast.jar"/>
	  <jar destfile="dist/imcast.jar" basedir="build" index="true">
	    <manifest>
	       <attribute name="Main-Class" value="pt.lsts.imc.net.ImcBroadcaster"/>
	    </manifest>
	  </jar>
	  <exec executable="lib/jar2sh.sh" >
		<arg value="dist/imcast"/>
		<arg value="dist/imcast.jar"/>
	  </exec>
	  </target>

  <target name="copysrc" depends="compile">
    <copy verbose="true" todir="build">
      <fileset dir="src" includes="**/*.java"/>
    </copy>
  </target>

  <target name="copylicense" depends="compile">
    <copy verbose="true" todir="build">
      <fileset dir="." includes="COPYRIGHT.TXT"/>
    </copy>
  </target>

  <target name="copygenerated" depends="compile">
    <copy verbose="true" todir="build">
      <fileset dir="src-generated" includes="**/*.java"/>
      <fileset dir="src-generated" includes="xml/IMC.xml"/>
    </copy>
  </target>

  <target name="scminfo.txt">

    <echo file="build/git.info.txt" append="false">GIT Tag:
    </echo>

    <exec executable="git" output="build/git.info.txt" append="true">
      <arg value="describe"/>
    </exec>

    <echo file="build/git.info.txt" append="true">

      GIT Hash:
    </echo>

    <exec executable="git" output="build/git.info.txt" append="true">
      <arg value="rev-parse"/>
      <arg value="HEAD"/>
    </exec>

    <echo file="build/git.info.txt" append="true">

      GIT Status:
    </echo>

    <exec executable="git" output="build/git.info.txt" append="true">
      <arg value="status"/>
    </exec>


  </target>

  <target name="jar-stripped" depends="compile,copylicense">
    <description>Create library jar (no source).</description>
    <jar destfile="dist/imc-stripped.jar" basedir="build" index="true">
    	<manifest>
			<attribute name="Main-Class" value="pt.lsts.imc.IMCDefinition"/>
		</manifest>
	</jar>
    <echo message="The file 'dist/imc-stripped.jar' was generated"/>
  </target>

  <target name="jar-controller" depends="compile,copylicense">
    <description>Create library jar (no source).</description>
    <jar destfile="dist/imc-controller.jar" basedir="build" index="true">
      <manifest>
        <attribute name="Main-Class" value="pt.lsts.imc.control.ControlLink"/>
      </manifest>
    </jar>
    <echo message="The file 'dist/imc-controller.jar' was generated"/>
  </target>


  <target name="jar-source" depends="compile,copysrc,copylicense,copygenerated">
    <description>Create library jar with source code embedded.</description>
    <jar destfile="dist/imc-src.jar" basedir="build" index="true">
    	<manifest>
    		<attribute name="Main-Class" value="pt.lsts.imc.IMCDefinition"/>
    	</manifest>
    </jar>
    <echo message="The file 'dist/imc-src.jar' was generated"/>
  </target>

  <target name="jar-full" depends="compile-all,copysrc,copylicense,copygenerated">
    <unjar src="lib/jchart2d-3.2.0.jar" dest="build"/>
    <unjar src="lib/js.jar" dest="build"/>
    <unjar src="lib/commons-io-2.0.1.jar" dest="build"/>
    <unjar src="lib/commons-lang3-3.1.jar" dest="build"/>
    <jar destfile="dist/imc-full.jar" basedir="build" index="true">
    	<manifest>
    		<attribute name="Main-Class" value="pt.lsts.imc.IMCDefinition"/>
    	</manifest>
    </jar>
    <echo message="The file 'dist/imc-full.jar' was generated"/>
  </target>

  <target name="libimc.jar" depends="gitinfo,compile,compile-gui,compile-merge,copysrc,copylicense,copygenerated" description="Generates neptus-compatible library (with bundled source).">
    <tstamp>
      <format property="time" pattern="yyyy-MM-dd HH:mm:ss"/>
    </tstamp>
    <echo message="Adding info: 'Jar generated from git revision ${scm.revision}.'"/>
    <echo file="build/META-INF/info" message="Jar generated from git revision ${scm.revision}."/>
    <description>Create library to be used by neptus.</description>
    <jar destfile="dist/libimc.jar" basedir="build" index="true">
    	<manifest>
    		<attribute name="Main-Class" value="pt.lsts.imc.IMCDefinition"/>
    	</manifest>
    </jar>
    <echo message="The file 'dist/libimc.jar' was generated"/>
  </target>

  <target name="generated" description="Generate java code for given IMC protocol (git repository)." depends="compile">
   	<input
   	    message="Path to IMC repository:"
   		defaultvalue="../imc/"
   	    addproperty="imc.dir"
  	  />
  	
    <javac encoding="${compile-encoding}" classpath="lib/commons-lang3-3.1.jar" srcdir="src-generator"  destdir="build" target="${compile-target}" source="${compile-source}" includes="**/*.java" fork="false" />
    
  	<java classname="pt.lsts.imc.generator.ClassGenerator" args="${imc.dir}" classpath="build;lib/commons-lang3-3.1.jar" />
  	
  	<!-- compile newly generated classes -->
    <antcall target="compile"/>
  	
  </target>

  <target name="javadoc" description="Create javadoc documentation" depends="compile-all">
    <javadoc additionalparam="-Xdoclint:none" charset="UTF-8" encoding="${compile-encoding}" access="public" author="true" classpathref="classpath.full" destdir="doc" doctitle="IMCJava API" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" packagenames="pt.lsts.util,pt.lsts.imc,pt.lsts.colormap,pt.lsts.neptus.messages,pt.lsts.imc.llf,pt.lsts.imc.merge,pt.lsts.imc.generator,pt.lsts.imc.scripting,pt.lsts.imc.gz,pt.lsts.imc.state,pt.lsts.imc.net,pt.lsts.dot,pt.lsts.imc.examples,pt.lsts.imc.inspector,pt.lsts.imc.lsf,pt.lsts.imc.sniffer,pt.lsts.imc.preview,pt.lsts.messages.listener" source="${compile-source}"  sourcepath="src-generated:src-generator:lsf-preview:src-sniffer:src-merge:src-scripting:src:src-bathymetry:src-generated:src-examples" splitindex="true" use="true" version="true"/>
  	<zip destfile="dist/doc.zip" basedir="doc"></zip>
  </target>

  <target name="lsfcat" description="Create a program for extracting and simplifying lsf files" depends="compile">
    <jar destfile="dist/lsfcat.jar" basedir="build" index="true">
      <manifest>
        <attribute name="Main-Class" value="pt.lsts.imc.lsf.LsfCat"/>
      </manifest>
    </jar>

    <exec executable="lib/jar2sh.sh" >
      <arg value="dist/lsfcat"/>
      <arg value="dist/lsfcat.jar"/>
    </exec>

    <delete file="dist/lsfcat.jar"/>
  </target>

  <target name="lsfmerge" description="Create a program for extracting and simplifying lsf files" depends="compile">
    <jar destfile="dist/lsfmerge.jar" basedir="build" index="true">
      <manifest>
        <attribute name="Main-Class" value="pt.lsts.imc.lsf.LsfMerge"/>
      </manifest>
    </jar>

    <exec executable="lib/jar2sh.sh" >
      <arg value="dist/lsfmerge"/>
      <arg value="dist/lsfmerge.jar"/>
    </exec>

    <!-- delete file="dist/lsfmerge.jar"/ -->
  </target>

  <target name="lsffilter" description="Create a program for filtering lsf files" depends="compile">
    <jar destfile="dist/lsffilter.jar" basedir="build" index="true">
      <manifest>
        <attribute name="Main-Class" value="pt.lsts.imc.lsf.LsfFilter"/>
      </manifest>
    </jar>

    <exec executable="lib/jar2sh.sh" >
      <arg value="dist/lsffilter"/>
      <arg value="dist/lsffilter.jar"/>
    </exec>

    <delete file="dist/lsffilter.jar"/>
  </target>

  <target name="lsf2csv" description="Create a program for extracting csv from log" depends="compile">
	    <jar destfile="dist/lsf2csv.jar" basedir="build" index="true">
	      <manifest>
	        <attribute name="Main-Class" value="pt.lsts.imc.lsf.Lsf2Csv"/>
	      </manifest>
	    </jar>

	    <exec executable="lib/jar2sh.sh" >
	      <arg value="dist/lsf2csv"/>
	      <arg value="dist/lsf2csv.jar"/>
	    </exec>
	  </target>


  <target name="ripples" description="Create ripples.jar" depends="compile">
    <javac encoding="${compile-encoding}" debug="true" srcdir="src-ripples" destdir="build" target="${compile-target}" source="${compile-source}" includes="**/*.java" fork="false" classpath="lib/firebase-client-jvm-LATEST.jar">
    </javac>
    <unjar src="lib/firebase-client-jvm-LATEST.jar" dest="build"/>

    <jar destfile="dist/ripples.jar" basedir="build" index="true">
      <manifest>
        <attribute name="Main-Class" value="pt.lsts.imc.ripples.RipplesMain"/>
      </manifest>
    </jar>
  </target>

  <target name="lsf2llf" description="Create a program for extracting and simplifying lsf files" depends="compile, compile-gui">
    <jar destfile="dist/lsf2llf.jar" basedir="build" index="true">
      <manifest>
        <attribute name="Main-Class" value="pt.lsts.imc.llf.LSF2LLF"/>
      </manifest>
    </jar>

    <exec executable="lib/jar2sh.sh" >
      <arg value="dist/lsf2llf"/>
      <arg value="dist/lsf2llf.jar"/>
    </exec>
  </target>
	
  <target name="ImcShell.jar" description="Create ImcShell program (as executable jar)" depends="compile, compile-shell">
    <jar destfile="dist/ImcShell.jar" basedir="build" index="true">
        <manifest>
          <attribute name="Main-Class" value="pt.lsts.imc.cli.ImcShell"/>
        </manifest>
      </jar>
  </target>
	
  <target name="PlanSequence.jar" depends="compile,compile-autonomy">
	<description>Create library jar (no source).</description>
		<jar destfile="dist/PlanSequence.jar" basedir="build" index="true">
	    	<manifest>
	        	<attribute name="Main-Class" value="pt.lsts.autonomy.SequentialPlanExecution"/>
	      	</manifest>
	    </jar>
	  	<echo message="The file 'dist/PlanSequence.jar' was generated"/>
  </target>
  
  <target name="report" depends="compile-all">
	<description>Execute Batch Logbook utility</description>
		<java classpathref="classpath.full" classname="pt.lsts.imc.process.BatchLogbook"></java>
	</target>
</project>
