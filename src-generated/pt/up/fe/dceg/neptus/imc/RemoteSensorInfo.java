/*
 * Below is the copyright agreement for IMCJava.
 * 
 * Copyright (c) 2010-2013, Laboratório de Sistemas e Tecnologia Subaquática
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     - Neither the names of IMC, LSTS, IMCJava nor the names of its 
 *       contributors may be used to endorse or promote products derived from 
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL LABORATORIO DE SISTEMAS E TECNOLOGIA SUBAQUATICA
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 * $Id:: RemoteSensorInfo.java 392 2013-02-28 17:26:14Z zepinto@gmail.com      $:
 */

// Source generated by IMCJava from IMC version 5.1.0
package pt.up.fe.dceg.neptus.imc;

/**
 *  IMC Message Remote Sensor Info (601)<br/>
 *  Whenever the CUCS receives a message from one of the existing sensors (through SMS, ZigBee, Acoustic Comms, ...) it disseminates that info recurring to this message.<br/>
 */

public class RemoteSensorInfo extends IMCMessage {

	public static final int ID_STATIC = 601;

	public RemoteSensorInfo() {
		super(ID_STATIC);
	}

	public RemoteSensorInfo(IMCDefinition defs) {
		super(defs, ID_STATIC);
	}

	public RemoteSensorInfo(String id, String sensor_class, double lat, double lon, float alt, float heading, String data) {
		super(ID_STATIC);
		if (id != null)
			setId(id);
		if (sensor_class != null)
			setSensorClass(sensor_class);
		setLat(lat);
		setLon(lon);
		setAlt(alt);
		setHeading(heading);
		if (data != null)
			setData(data);
	}

	/**
	 *  @return Id - plaintext
	 */
	public String getId() {
		return getString("id");
	}

	/**
	 *  @return Class - plaintext
	 */
	public String getSensorClass() {
		return getString("sensor_class");
	}

	/**
	 *  @return Latitude (rad) - fp64_t
	 */
	public double getLat() {
		return getDouble("lat");
	}

	/**
	 *  @return Longitude (rad) - fp64_t
	 */
	public double getLon() {
		return getDouble("lon");
	}

	/**
	 *  @return Altitude (m) - fp32_t
	 */
	public double getAlt() {
		return getDouble("alt");
	}

	/**
	 *  @return Heading (rad) - fp32_t
	 */
	public double getHeading() {
		return getDouble("heading");
	}

	/**
	 *  @return Custom Data (tuplelist) - plaintext
	 */
	public java.util.LinkedHashMap<String, String> getData() {
		return getTupleList("data");
	}

	/**
	 *  @param id Id
	 */
	public void setId(String id) {
		values.put("id", id);
	}

	/**
	 *  @param sensor_class Class
	 */
	public void setSensorClass(String sensor_class) {
		values.put("sensor_class", sensor_class);
	}

	/**
	 *  @param lat Latitude (rad)
	 */
	public void setLat(double lat) {
		values.put("lat", lat);
	}

	/**
	 *  @param lon Longitude (rad)
	 */
	public void setLon(double lon) {
		values.put("lon", lon);
	}

	/**
	 *  @param alt Altitude (m)
	 */
	public void setAlt(double alt) {
		values.put("alt", alt);
	}

	/**
	 *  @param heading Heading (rad)
	 */
	public void setHeading(double heading) {
		values.put("heading", heading);
	}

	/**
	 *  @param data Custom Data (tuplelist)
	 */
	public void setData(java.util.LinkedHashMap<String, ?> data) {
		String val = encodeTupleList(data);
		values.put("data", val);
	}

	public void setData(String data) {
		values.put("data", data);
	}

}
