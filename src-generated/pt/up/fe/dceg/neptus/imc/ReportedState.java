/*
 * Below is the copyright agreement for IMCJava.
 * 
 * Copyright (c) 2010-2013, Laboratório de Sistemas e Tecnologia Subaquática
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     - Neither the names of IMC, LSTS, IMCJava nor the names of its 
 *       contributors may be used to endorse or promote products derived from 
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL LABORATORIO DE SISTEMAS E TECNOLOGIA SUBAQUATICA
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 * $Id:: ReportedState.java 392 2013-02-28 17:26:14Z zepinto@gmail.com         $:
 */

// Source generated by IMCJava from IMC version 5.1.0
package pt.up.fe.dceg.neptus.imc;

/**
 *  IMC Message Reported State (600)<br/>
 *  A vehicle state that is reported to other consoles (including PDAConsole). Source can be acoustic tracker, SMS, Wi-Fi, etc...<br/>
 */

public class ReportedState extends IMCMessage {

	public static final int ID_STATIC = 600;

	public enum S_TYPE {
		WI_FI(0),
		TRACKER(1),
		SMS(2),
		ACOUSTIC_MODEM(3),
		UNKNOWN(254);

		protected long value;

		public long value() {
			return value;
		}

		S_TYPE(long value) {
			this.value = value;
		}
	}

	public ReportedState() {
		super(ID_STATIC);
	}

	public ReportedState(IMCDefinition defs) {
		super(defs, ID_STATIC);
	}

	public ReportedState(double lat, double lon, double depth, double roll, double pitch, double yaw, double rcp_time, String sid, short s_type) {
		super(ID_STATIC);
		setLat(lat);
		setLon(lon);
		setDepth(depth);
		setRoll(roll);
		setPitch(pitch);
		setYaw(yaw);
		setRcpTime(rcp_time);
		if (sid != null)
			setSid(sid);
		setSType(s_type);
	}

	/**
	 *  @return Latitude (rad) - fp64_t
	 */
	public double getLat() {
		return getDouble("lat");
	}

	/**
	 *  @return Longitude (rad) - fp64_t
	 */
	public double getLon() {
		return getDouble("lon");
	}

	/**
	 *  @return Depth (m) - fp64_t
	 */
	public double getDepth() {
		return getDouble("depth");
	}

	/**
	 *  @return Roll (rad) - fp64_t
	 */
	public double getRoll() {
		return getDouble("roll");
	}

	/**
	 *  @return Pitch (rad) - fp64_t
	 */
	public double getPitch() {
		return getDouble("pitch");
	}

	/**
	 *  @return Yaw (rad) - fp64_t
	 */
	public double getYaw() {
		return getDouble("yaw");
	}

	/**
	 *  @return Reception Time (s) - fp64_t
	 */
	public double getRcpTime() {
		return getDouble("rcp_time");
	}

	/**
	 *  @return System Identifier - plaintext
	 */
	public String getSid() {
		return getString("sid");
	}

	/**
	 *  How the position was received/calculated<br/>
	 *  @return Source Type (enumerated) - uint8_t
	 */
	public S_TYPE getSType() {
		try {
			S_TYPE o = S_TYPE.valueOf(getMessageType().getFieldPossibleValues("s_type").get(getLong("s_type")));
			return o;
		}
		catch (Exception e) {
			return null;
		}
	}

	/**
	 *  @param lat Latitude (rad)
	 */
	public void setLat(double lat) {
		values.put("lat", lat);
	}

	/**
	 *  @param lon Longitude (rad)
	 */
	public void setLon(double lon) {
		values.put("lon", lon);
	}

	/**
	 *  @param depth Depth (m)
	 */
	public void setDepth(double depth) {
		values.put("depth", depth);
	}

	/**
	 *  @param roll Roll (rad)
	 */
	public void setRoll(double roll) {
		values.put("roll", roll);
	}

	/**
	 *  @param pitch Pitch (rad)
	 */
	public void setPitch(double pitch) {
		values.put("pitch", pitch);
	}

	/**
	 *  @param yaw Yaw (rad)
	 */
	public void setYaw(double yaw) {
		values.put("yaw", yaw);
	}

	/**
	 *  @param rcp_time Reception Time (s)
	 */
	public void setRcpTime(double rcp_time) {
		values.put("rcp_time", rcp_time);
	}

	/**
	 *  @param sid System Identifier
	 */
	public void setSid(String sid) {
		values.put("sid", sid);
	}

	/**
	 *  @param s_type Source Type (enumerated)
	 */
	public void setSType(S_TYPE s_type) {
		values.put("s_type", s_type.value());
	}

	/**
	 *  @param s_type Source Type (as a String)
	 */
	public void setSType(String s_type) {
		setValue("s_type", s_type);
	}

	/**
	 *  @param s_type Source Type (integer value)
	 */
	public void setSType(short s_type) {
		setValue("s_type", s_type);
	}

}
