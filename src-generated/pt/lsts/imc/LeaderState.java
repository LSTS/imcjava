/*
 * Below is the copyright agreement for IMCJava.
 * 
 * Copyright (c) 2010-2013, Laboratório de Sistemas e Tecnologia Subaquática
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     - Neither the names of IMC, LSTS, IMCJava nor the names of its 
 *       contributors may be used to endorse or promote products derived from 
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL LABORATORIO DE SISTEMAS E TECNOLOGIA SUBAQUATICA
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 *                                                                             $:
 */

// Source generated by IMCJava from IMC version 5.3.0
package pt.lsts.imc;

/**
 *  IMC Message Leader State (563)<br/>
 *  This message defines the formation leader state.<br/>
 *  LeaderState is a complete description of the leader state<br/>
 *  in terms of parameters such as position, orientation and<br/>
 *  velocities at a particular moment in time.<br/>
 *  The system position is given by a North-East-Down (NED)<br/>
 *  local tangent plane displacement (x, y, z) relative to<br/>
 *  an absolute WGS-84 coordinate (latitude, longitude,<br/>
 *  height above ellipsoid).<br/>
 *  The symbols for position and attitude as well as linear and<br/>
 *  angular velocities were chosen according to SNAME's notation (1950).<br/>
 *  The body-fixed reference frame and Euler angles are depicted<br/>
 *  next:<br/>
 *  Euler angles<br/>
 */

public class LeaderState extends IMCMessage {

	public static final int ID_STATIC = 563;

	public enum OP {
		REQUEST(0),
		SET(1),
		REPORT(2);

		protected long value;

		public long value() {
			return value;
		}

		OP(long value) {
			this.value = value;
		}
	}

	public LeaderState() {
		super(ID_STATIC);
	}

	public LeaderState(IMCDefinition defs) {
		super(defs, ID_STATIC);
	}

	public static LeaderState create(Object... values) {
		LeaderState m = new LeaderState();
		for (int i = 0; i < values.length-1; i+= 2)
			m.setValue(values[i].toString(), values[i+1]);
		return m;
	}

	public static LeaderState clone(IMCMessage msg) throws Exception {

		LeaderState m = new LeaderState();
		if (msg == null)
			return m;
		if(msg.definitions != m.definitions){
			msg = msg.cloneMessage();
			IMCUtil.updateMessage(msg, m.definitions);
		}
		else if (msg.getMgid()!=m.getMgid())
			throw new Exception("Argument "+msg.getAbbrev()+" is incompatible with message "+m.getAbbrev());

		m.getHeader().values.putAll(msg.getHeader().values);
		m.values.putAll(msg.values);
		return m;
	}

	public LeaderState(String group_name, OP op, double lat, double lon, float height, float x, float y, float z, float phi, float theta, float psi, float vx, float vy, float vz, float p, float q, float r, float svx, float svy, float svz) {
		super(ID_STATIC);
		if (group_name != null)
			setGroupName(group_name);
		setOp(op);
		setLat(lat);
		setLon(lon);
		setHeight(height);
		setX(x);
		setY(y);
		setZ(z);
		setPhi(phi);
		setTheta(theta);
		setPsi(psi);
		setVx(vx);
		setVy(vy);
		setVz(vz);
		setP(p);
		setQ(q);
		setR(r);
		setSvx(svx);
		setSvy(svy);
		setSvz(svz);
	}

	/**
	 *  @return Group Name - plaintext
	 */
	public String getGroupName() {
		return getString("group_name");
	}

	/**
	 *  Action on the formation leader state variables<br/>
	 *  @return Action on the leader state (enumerated) - uint8_t
	 */
	public OP getOp() {
		try {
			OP o = OP.valueOf(getMessageType().getFieldPossibleValues("op").get(getLong("op")));
			return o;
		}
		catch (Exception e) {
			return null;
		}
	}

	/**
	 *  @return Latitude (WGS-84) (rad) - fp64_t
	 */
	public double getLat() {
		return getDouble("lat");
	}

	/**
	 *  @return Longitude (WGS-84) (rad) - fp64_t
	 */
	public double getLon() {
		return getDouble("lon");
	}

	/**
	 *  @return Height (WGS-84) (m) - fp32_t
	 */
	public double getHeight() {
		return getDouble("height");
	}

	/**
	 *  @return Offset north (m) - fp32_t
	 */
	public double getX() {
		return getDouble("x");
	}

	/**
	 *  @return Offset east (m) - fp32_t
	 */
	public double getY() {
		return getDouble("y");
	}

	/**
	 *  @return Offset down (m) - fp32_t
	 */
	public double getZ() {
		return getDouble("z");
	}

	/**
	 *  @return Rotation over x axis (rad) - fp32_t
	 */
	public double getPhi() {
		return getDouble("phi");
	}

	/**
	 *  @return Rotation over y axis (rad) - fp32_t
	 */
	public double getTheta() {
		return getDouble("theta");
	}

	/**
	 *  @return Rotation over z axis (rad) - fp32_t
	 */
	public double getPsi() {
		return getDouble("psi");
	}

	/**
	 *  @return Ground Velocity X (North) (m/s) - fp32_t
	 */
	public double getVx() {
		return getDouble("vx");
	}

	/**
	 *  @return Ground Velocity Y (East) (m/s) - fp32_t
	 */
	public double getVy() {
		return getDouble("vy");
	}

	/**
	 *  @return Ground Velocity Z (Down) (m/s) - fp32_t
	 */
	public double getVz() {
		return getDouble("vz");
	}

	/**
	 *  @return Angular Velocity in x (rad/s) - fp32_t
	 */
	public double getP() {
		return getDouble("p");
	}

	/**
	 *  @return Angular Velocity in y (rad/s) - fp32_t
	 */
	public double getQ() {
		return getDouble("q");
	}

	/**
	 *  @return Angular Velocity in z (rad/s) - fp32_t
	 */
	public double getR() {
		return getDouble("r");
	}

	/**
	 *  @return Stream Velocity X (North) (m/s) - fp32_t
	 */
	public double getSvx() {
		return getDouble("svx");
	}

	/**
	 *  @return Stream Velocity Y (East) (m/s) - fp32_t
	 */
	public double getSvy() {
		return getDouble("svy");
	}

	/**
	 *  @return Stream Velocity Z (Down) (m/s) - fp32_t
	 */
	public double getSvz() {
		return getDouble("svz");
	}

	/**
	 *  @param group_name Group Name
	 */
	public void setGroupName(String group_name) {
		values.put("group_name", group_name);
	}

	/**
	 *  @param op Action on the leader state (enumerated)
	 */
	public void setOp(OP op) {
		values.put("op", op.value());
	}

	/**
	 *  @param op Action on the leader state (as a String)
	 */
	public void setOp(String op) {
		setValue("op", op);
	}

	/**
	 *  @param op Action on the leader state (integer value)
	 */
	public void setOp(short op) {
		setValue("op", op);
	}

	/**
	 *  @param lat Latitude (WGS-84) (rad)
	 */
	public void setLat(double lat) {
		values.put("lat", lat);
	}

	/**
	 *  @param lon Longitude (WGS-84) (rad)
	 */
	public void setLon(double lon) {
		values.put("lon", lon);
	}

	/**
	 *  @param height Height (WGS-84) (m)
	 */
	public void setHeight(double height) {
		values.put("height", height);
	}

	/**
	 *  @param x Offset north (m)
	 */
	public void setX(double x) {
		values.put("x", x);
	}

	/**
	 *  @param y Offset east (m)
	 */
	public void setY(double y) {
		values.put("y", y);
	}

	/**
	 *  @param z Offset down (m)
	 */
	public void setZ(double z) {
		values.put("z", z);
	}

	/**
	 *  @param phi Rotation over x axis (rad)
	 */
	public void setPhi(double phi) {
		values.put("phi", phi);
	}

	/**
	 *  @param theta Rotation over y axis (rad)
	 */
	public void setTheta(double theta) {
		values.put("theta", theta);
	}

	/**
	 *  @param psi Rotation over z axis (rad)
	 */
	public void setPsi(double psi) {
		values.put("psi", psi);
	}

	/**
	 *  @param vx Ground Velocity X (North) (m/s)
	 */
	public void setVx(double vx) {
		values.put("vx", vx);
	}

	/**
	 *  @param vy Ground Velocity Y (East) (m/s)
	 */
	public void setVy(double vy) {
		values.put("vy", vy);
	}

	/**
	 *  @param vz Ground Velocity Z (Down) (m/s)
	 */
	public void setVz(double vz) {
		values.put("vz", vz);
	}

	/**
	 *  @param p Angular Velocity in x (rad/s)
	 */
	public void setP(double p) {
		values.put("p", p);
	}

	/**
	 *  @param q Angular Velocity in y (rad/s)
	 */
	public void setQ(double q) {
		values.put("q", q);
	}

	/**
	 *  @param r Angular Velocity in z (rad/s)
	 */
	public void setR(double r) {
		values.put("r", r);
	}

	/**
	 *  @param svx Stream Velocity X (North) (m/s)
	 */
	public void setSvx(double svx) {
		values.put("svx", svx);
	}

	/**
	 *  @param svy Stream Velocity Y (East) (m/s)
	 */
	public void setSvy(double svy) {
		values.put("svy", svy);
	}

	/**
	 *  @param svz Stream Velocity Z (Down) (m/s)
	 */
	public void setSvz(double svz) {
		values.put("svz", svz);
	}

}
