plugins {
    id "com.gorylenko.gradle-git-properties" version "2.2.2"
}

description = "An IMC Java with bindings and generator for IMC."

allprojects {
    version = '1.0.1'
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    compileJava.options.encoding = 'UTF-8'
    
    apply plugin: "com.gorylenko.gradle-git-properties"
    
    sourceSets {
        main {
            java {
                srcDirs = ['java']
            }
            resources {
                srcDirs = ['resources']
            }
        }
    }

    processResources {
        from (rootProject.projectDir) {
            include 'COPYRIGHT.TXT'
        }
        doLast {
            println 'Added common resources'
        }
    }

    jar {
        manifest {
            attributes( 'Specification-Title': rootProject.name
                    ,'Specification-Version': project.version
                    ,'Implementation-Title': project.name
                    ,'Implementation-Version': project.version
                    ,'Build-Revision': "${rootProject.name}-${project.version}-git#${-> project.ext.gitProps['git.commit.id.describe']}"
                    )
        }
    }

    gitProperties {
        extProperty = 'gitProps'
        failOnNoGitDirectory = false

        dateFormat = "yyyy-MM-dd'T'HH:mmZ"
        dateFormatTimeZone = "UTC"

        gitPropertiesName = "git.info"
        keys = ['git.branch',
                'git.build.version',
                'git.closest.tag.commit.count',
                'git.closest.tag.name',
                'git.commit.id',
                'git.commit.id.abbrev',
                'git.commit.id.describe',
                'git.commit.time',
                'git.dirty',
                'git.remote.origin.url',
                'git.tags',
                ]
    }
    generateGitProperties.outputs.upToDateWhen { false }

}

    configure(subprojects.findAll { it.name != 'core' }) {
        dependencies {
            implementation project(':core')
            implementation project(':core').sourceSets.main.runtimeClasspath
        }
    }

def jarTask(proj, jarName, destFolder, mainClass) {
    configure(proj) {
        proj.tasks.create(jarName, Jar) {
            dependsOn generateGitProperties
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            description = "Generate $jarName for IMC API"
            group = 'Distribution'
            manifest {m ->
                m.getAttributes().put 'Specification-Title', rootProject.name
                if (!mainClass.isEmpty()) m.getAttributes().put 'Main-Class', mainClass
                m.getAttributes().put 'Specification-Version', project.version
                m.getAttributes().put 'Implementation-Title', project.name
                m.getAttributes().put 'Implementation-Version', project.version
                //m.getAttributes().put 'Build-Revision', "${rootProject.name}-${project.version}-git#${-> project.ext.gitProps['git.commit.id.describe']}"
            }
            // Addimg runtime jars into the jar
            from {configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
            //from sourceSets.main.allSource
            with jar
            archivesBaseName = jarName
            //archiveVersion = ''
            destinationDir = file(!destFolder.isEmpty() ? "$rootDir/$destFolder" : "$rootDir/dist")

            doLast {
                // println "$project.name"
                // println "configurations.runtimeClasspath"
                // configurations.compileClasspath.each { print ' > '; println it }
                // println "sourceSets.main.runtimeClasspath"
                // sourceSets.main.compileClasspath.each { print ' > '; println it }
            }
        }
    }
}

// dependencies {
//     testImplementation 'junit:junit:4.12'
// }
